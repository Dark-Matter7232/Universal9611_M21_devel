menu "CPU Frequency scaling"

config CPU_FREQ
	bool "CPU Frequency scaling"
	select SRCU
	help
	  CPU Frequency scaling allows you to change the clock speed of 
	  CPUs on the fly. This is a nice method to save power, because 
	  the lower the CPU clock speed, the less power the CPU consumes.

	  Note that this driver doesn't automatically change the CPU
	  clock speed, you need to either enable a dynamic cpufreq governor
	  (see below) after boot, or use a userspace tool.

	  For details, take a look at <file:Documentation/cpu-freq>.

	  If in doubt, say N.

if CPU_FREQ

config CPU_FREQ_GOV_ATTR_SET
	bool

config CPU_FREQ_GOV_COMMON
	select CPU_FREQ_GOV_ATTR_SET
	select IRQ_WORK
	bool

config CPU_FREQ_BOOST_SW
	bool
	depends on THERMAL

config CPU_FREQ_STAT
	bool "CPU frequency transition statistics"
	help
	  Export CPU frequency statistics information through sysfs.

	  If in doubt, say N.

config CPU_FREQ_TIMES
       bool "CPU frequency time-in-state statistics"
       help
         Export CPU time-in-state information through procfs.

         If in doubt, say N.

choice
	prompt "Default CPUFreq governor"
	default CPU_FREQ_DEFAULT_GOV_USERSPACE if ARM_SA1100_CPUFREQ || ARM_SA1110_CPUFREQ
	default CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
	help
	  This option sets which CPUFreq governor shall be loaded at
	  startup. If in doubt, select 'performance'.

config CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
	bool "schedutil"
	depends on SMP
	select CPU_FREQ_GOV_SCHEDUTIL
	select CPU_FREQ_GOV_PERFORMANCE
	help
	  Use the 'schedutil' CPUFreq governor by default. If unsure,
	  have a look at the help section of that governor. The fallback
	  governor will be 'performance'.

endchoice

config CPU_FREQ_GOV_SCHEDUTIL
	bool "'schedutil' cpufreq policy governor"
	depends on CPU_FREQ && SMP
	select CPU_FREQ_GOV_ATTR_SET
	select IRQ_WORK
	help
	  This governor makes decisions based on the utilization data provided
	  by the scheduler.  It sets the CPU frequency to be proportional to
	  the utilization/capacity ratio coming from the scheduler.  If the
	  utilization is frequency-invariant, the new frequency is also
	  proportional to the maximum available frequency.  If that is not the
	  case, it is proportional to the current frequency of the CPU.  The
	  frequency tipping point is at utilization/capacity equal to 80% in
	  both cases.

	  If in doubt, say N.

config FREQVAR_TUNE
	bool "CPU frequency variant tuner"
	depends on SCHED_EMS && CPU_FREQ_GOV_SCHEDUTIL
	help
	  This option provides the controller which tunes system performance
	  as frequency variant.

	  Say N if unsure.

comment "CPU frequency scaling drivers"

if ARM || ARM64
source "drivers/cpufreq/Kconfig.arm"
endif

comment "P-state Boost Solutions"

choice EXYNOS_PSTATE
	prompt "P-state Boost Solution"
	default EXYNOS_PSTATE_DISABLE
	depends on ARCH_EXYNOS
	depends on CPU_FREQ
	help
	  Default status of P-state boost is disable.

config EXYNOS_PSTATE_DISABLE
	bool "disable"
	help
	  This option sets P-state boost solution as disable.
	  If in doubt, set this config.

config EXYNOS_PSTATE_HAFM
	bool "Exynos HAFM"
	help
	  This option sets P-state boost solution as HAFM.
	  The config makes HIU just deliver frequency level and power budget
	  given from CPUFreq driver and register set.

config EXYNOS_PSTATE_HAFM_TB
	bool "Exynos HAFM-TB"
	help
	  This option sets P-state boost solution as HAFM-TB.

config EXYNOS_PSTATE_MODE_CHANGER
	bool "Exynos Mode Changer"
	depends on HOTPLUG_CPU
	help
	  This option sets P-state boost solution as EMC.

endchoice

endif
endmenu
